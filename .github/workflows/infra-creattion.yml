name: infra creation

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write

env:
  TF_VERSION: "1.12.0"
  AWS_REGION: "ap-south-1"
  AWS_ROLE_ARN: "arn:aws:iam::211125325699:role/Demo_Access"

jobs:
  lint-and-security:
    name: Lint and Security Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install TFLint
        run: |
          wget https://github.com/terraform-linters/tflint/releases/download/v0.50.2/tflint_linux_amd64.zip
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/
          tflint --version

      - name: Run TFLint
        run: tflint --init && tflint -f compact
      - name: Run Checkov (soft fail)
        uses: bridgecrewio/checkov-action@v12.2458.0
        with:
          directory: .
          soft_fail: true

  terraform-plan:
    name: Terraform Plan and Docs
    runs-on: ubuntu-latest
    needs: lint-and-security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Test
        run: terraform test
        continue-on-error: true

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt -recursive

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color | tee plan.txt
        continue-on-error: true

      - name: Set PLAN output
        id: set-plan
        run: |
          {
            echo 'PLAN<<EOF'
            echo 'terraform'
            cat plan.txt
            echo 'EOF'
          } >> $GITHUB_ENV


      - name: Generate Terraform Docs
        uses: terraform-docs/gh-actions@v1.3.0
        with:
          working-dir: ./modules
          output-file: README.md
          output-method: inject
          git-push: true
          config-file: .terraform-docs.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Post Terraform Docs as PR Comment
        uses: marocchino/sticky-pull-request-comment@v2.9.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: "Terraform Documentation"
          path: "./README.md"
          number: ${{ github.event.pull_request.number }}

      - name: Commit and push all changes
        run: |
          git add -A
          git commit -m "Update Terraform docs and plan"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ env.PLAN }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
